# LINEミニアプリ開発 要件定義書（Railway対応版）

## 1. プロジェクト概要
Botarhythm Coffee Roaster において、顧客の「来店履歴」および「購入履歴」をLINEミニアプリ上で記録・閲覧できるようにし、リピート促進と履歴管理の効率化を図る。

## 2. 対象ユーザー
- 一般来店客（LINEログインを使う）
- 店舗スタッフ（顧客の代理入力を行う）

## 3. 主な機能要件

### 3.1 顧客向け機能
- LINEログイン（LIFF）
- 来店チェックイン（ワンタップ）
- 購入履歴の登録（商品・数量）
- 過去の履歴閲覧

### 3.2 スタッフ向け機能
- 顧客一覧・履歴の確認（管理UI）
- 顧客に代わって履歴を記録する入力機能

## 4. 非機能要件

| 項目           | 内容                                      |
|----|----|
| データ保存先   | Notion API（顧客DB・履歴DB）              |
| 本人認証       | LINEログイン（UIDによる一意識別）         |
| デバイス対応   | モバイルファースト（iOS/Android）         |
| 使用環境       | Cursor（React + Tailwind）                |
| サーバー運用   | **Railway（クラウドPaaS）で本番・検証サーバーを常時公開** |
| 環境変数管理   | **Railwayのダッシュボードで設定。`.env.example`をリポジトリに含める** |
| CI/CD         | **GitHub Actionsでmainブランチpush時に自動デプロイ** |
| バージョン管理 | **GitHub（mainブランチが本番）、依存はDependabot/自動PRで更新** |
| Node.jsバージョン | **package.jsonのenginesで20以上を要求、RailwayはNode.js 22でビルド** |
| デプロイ失敗時 | **RailwayのビルドログをAIが自動取得・即時デバッグ・修正案提示** |
| MCP/CLI連携   | **Railway CLI/MCPでAIが自律的に状態監視・再デプロイ・環境変数同期を自動化** |
| 拡張予定       | 将来的に電話番号照合やSquare連携を検討   |

- 本番・検証用URLはRailwayのサブドメインまたはカスタムドメインを利用
- 開発時はローカル＋ngrok等も可だが、本番LINEミニアプリ連携はRailway前提

## 5. UI設計指針

- LINE公式アプリのUIトーンに寄せた構成
- リッチメニューと連携（Canvaで作成予定）
- 各画面は `/checkin`, `/purchase`, `/history` に分割
- ボタンはタップしやすく、最小限の操作で目的を達成できるよう設計

## 6. Notionデータ構成

### 顧客DB
- LINE UID
- 表示名
- 登録日

### 履歴DB
- 関連顧客ID（Relation）
- タイプ（来店／購入）
- 日時
- 商品名／数量／メモ

## 7. スケジュール目安

| フェーズ           | 内容                                       |
|-----|-----|
| 要件定義・UI設計   | このドキュメントとプロンプトを整備         |
| 初期実装           | LIFF認証・Notion接続・UIスケルトン構築     |
| MVP構築            | 来店登録／履歴入力／履歴閲覧               |
| テスト・公開       | 店舗導入 → 顧客にリッチメニュー経由で提供  |

## 8. 備考
- 店舗レジはSquareターミナルを使用（現段階では連携せず）
- LINE公式アカウントのリッチメニューはCanvaでデザイン

---

## 9. 開発マイルストーンと学んだ教訓

### 9.1 完了したマイルストーン

#### ✅ Phase 1: 基盤構築（2025年8月2日完了）
- **Railway MCPサーバー導入**: カスタムMCPサーバー（`scripts/railway-mcp-server.js`）を実装
- **LIFF統合**: `LiffProvider`と`useLiff`フックを全画面に統合
- **Notion API連携**: 顧客・履歴・商品データベースとの連携実装
- **環境変数設定**: Railwayダッシュボードでの環境変数管理
- **Railway本番デプロイ**: 8080ポートでの正常動作確認

#### ✅ Phase 2: 502エラー解決（2025年8月2日完了）
- **ポート設定の不一致解決**: Railway設定（8080）とアプリケーション設定の統一
- **環境変数名の修正**: Notion API環境変数名の統一（`NOTION_CUSTOMER_DB_ID`等）
- **ヘルスチェック改善**: Notion API未設定時の503エラー返却
- **Railway設定最適化**: `railway.json`でのヘルスチェック設定

### 9.2 重要な学んだ教訓

#### 🔧 Railway運用に関する教訓
1. **ポート設定の重要性**
   - Railwayダッシュボードのポート設定とアプリケーションのポート設定は必ず一致させる
   - デフォルトポート: `8080`（Railway推奨）
   - 環境変数`PORT`と`railway.json`の`healthcheckPort`を同期

2. **環境変数管理**
   - Railwayダッシュボードでの環境変数設定が優先
   - 環境変数名の統一が重要（`NOTION_CUSTOMER_DB_ID`等）
   - `VITE_LIFF_ID`は必ずRailway環境変数に設定

3. **デプロイとログ確認**
   - `railway logs`でアプリケーションの起動状況を確認
   - 502エラー時はポート設定と環境変数を優先的に確認
   - 強制再デプロイ（`railway redeploy`）で最新コードを確実に反映

#### 🚨 トラブルシューティングの教訓
1. **502エラーの原因特定**
   - サーバー起動ログで実際のポート番号を確認
   - Railway環境変数とアプリケーション設定の不一致を疑う
   - 一時的な問題ではなく、設定の問題であることが多い

2. **DNSエラーとアプリケーションエラーの区別**
   - URLのタイプミス（`.ap` vs `.app`）はDNSエラー
   - 正しいURLでも502エラーはアプリケーション設定の問題
   - プロトコル（`https://`）の確認も重要

#### 📱 LINEミニアプリ開発の教訓
1. **LIFF統合の重要性**
   - ハードコードされたユーザーIDではなく、実際のLINE UIDを使用
   - `useLiff`フックでログイン状態を適切に管理
   - ログイン前の適切なUI表示

2. **フロントエンドとバックエンドの連携**
   - 静的ファイル配信の設定（`express.static`）
   - SPAルーティングの適切な設定
   - APIエンドポイントのエラーハンドリング

### 9.3 今後の開発方針

#### 🎯 次のフェーズ: UI/UX改善
1. **LINE公式アプリとのUI統一**
   - カラーパレットとフォントの統一
   - ボタンサイズとタップ領域の最適化
   - ローディング状態の改善

2. **ユーザビリティ向上**
   - ワンタップでのチェックイン機能
   - 商品選択の簡素化
   - 履歴閲覧の直感的な操作

3. **エラーハンドリングの改善**
   - ユーザーフレンドリーなエラーメッセージ
   - ネットワークエラー時の適切な対応
   - オフライン対応の検討

#### 🔄 継続的な改善
- **パフォーマンス最適化**: 静的ファイルのキャッシュ設定
- **セキュリティ強化**: CORS設定とヘッダー設定
- **監視とログ**: 構造化ログの活用
- **テスト自動化**: 単体テストとE2Eテストの実装

### 9.4 技術スタック確定版

#### フロントエンド
- **React 18.2.0**: 最新のReact機能を活用
- **TypeScript 5.9.2**: 型安全性の確保
- **Tailwind CSS 3.3.6**: 効率的なスタイリング
- **Vite 5.0.10**: 高速な開発・ビルド環境
- **LIFF SDK 2.22.3**: LINEログイン統合

#### バックエンド
- **Node.js 22**: Railway推奨バージョン
- **Express 4.18.2**: 軽量なWebフレームワーク
- **Notion API**: データベース管理
- **Railway**: 本番環境ホスティング

#### 開発・運用
- **GitHub Actions**: CI/CD自動化
- **Railway MCP**: デプロイ管理自動化
- **Cursor**: AI支援開発環境

---

**最終更新**: 2025年8月2日
**現在のステータス**: ✅ 基盤構築完了、ログイン機能動作確認済み
**次のマイルストーン**: 🎨 UI/UX改善フェーズ開始
description:
globs:
alwaysApply: false
---
